generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("MYSQL_DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  username     String
  password     String
  profileImage String?      @map("profile_image")
  role         Role         @default(ATHLETE)
  gymId        String?      @map("gym_id")
  gym          Gym?         @relation(fields: [gymId], references: [id])
  movementsId  String?      @map("movements_id")
  movements    Movements?   @relation(fields: [movementsId], references: [id])
  workoutLogs  WorkoutLog[]
  comments     Comment[]
  responses    Response[]

  active             Boolean  @default(true)
  accepNotifications Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

//entrenamiento
model Workout {
  id          String       @id @default(uuid())
  title       String
  description String?
  date        DateTime
  timerType   String?
  duration    Int?
  order       Int?
  exercises   String[]
  gym_id      String?
  gym         Gym?         @relation(fields: [gym_id], references: [id])
  workoutLogs WorkoutLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//registro de entrenamiento
model WorkoutLog {
  id         String    @id @default(uuid())
  user_id    String
  user       User      @relation(fields: [user_id], references: [id])
  workout_id String
  workout    Workout   @relation(fields: [workout_id], references: [id])
  weight     Float?
  time       Int? // Intervalo en segundos
  comment    String?
  gym_id     String?
  gym        Gym?      @relation(fields: [gym_id], references: [id])
  comments   Comment[]
}

//comentario
model Comment {
  id             String     @id @default(uuid())
  workout_log_id String
  workoutLog     WorkoutLog @relation(fields: [workout_log_id], references: [id])
  user_id        String
  user           User       @relation(fields: [user_id], references: [id])
  message        String
  createdAt      DateTime   @default(now())
  gym_id         String?
  gym            Gym?       @relation(fields: [gym_id], references: [id])
  responses      Response[]
}

model Response {
  id         String   @id @default(uuid())
  comment_id String
  comment    Comment  @relation(fields: [comment_id], references: [id])
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  message    String
  created_at DateTime @default(now())
  gym_id     String?
  gym        Gym?     @relation(fields: [gym_id], references: [id])
}

model Gym {
  id          String       @id @default(uuid())
  name        String
  location    String?
  users       User[]
  workouts    Workout[]
  workoutLogs WorkoutLog[]
  comments    Comment[]
  responses   Response[]
}

model Movements {
  id             String @id @default(uuid())
  SQUAT          Float?
  FRONT_SQUAT    Float?
  DEADLIFT       Float?
  BENCH_PRESS    Float?
  SHOULDER_PRESS Float?
  SNATCH         Float?
  OVERHEAD_SQUAT Float?
  CLEAN_AND_JERK Float?
  CLEAN          Float?
  JERK           Float?
  User           User[]
}

enum Role {
  COACH
  ATHLETE
}
