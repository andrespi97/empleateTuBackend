generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  username        String
  password        String
  profileImage    String?          @map("profile_image")
  role            Role             @default(ATHLETE)
  gymId           String?          @map("gym_id")
  gym             Gym?             @relation(fields: [gymId], references: [id])
  personalRecords PersonalRecord[]
  workoutLogs     WorkoutLog[]
  comments        Comment[]
  responses       Response[]

  active             Boolean  @default(true)
  accepNotifications Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Workout {
  id          String       @id @default(uuid())
  name        String
  description String?
  date        DateTime
  gym_id      String?
  gym         Gym?         @relation(fields: [gym_id], references: [id])
  workoutLogs WorkoutLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PersonalRecord {
  id            String   @id @default(uuid())
  user_id       String
  user          User     @relation(fields: [user_id], references: [id])
  exercise      Exercise
  record_weight Float?
  record_time   Int? // Intervalo en segundos
  gym_id        String?
  gym           Gym?     @relation(fields: [gym_id], references: [id])

  @@unique([user_id, exercise, gym_id])
}

model WorkoutLog {
  id         String    @id @default(uuid())
  user_id    String
  user       User      @relation(fields: [user_id], references: [id])
  workout_id String
  workout    Workout   @relation(fields: [workout_id], references: [id])
  weight     Float?
  time       Int? // Intervalo en segundos
  comment    String?
  gym_id     String?
  gym        Gym?      @relation(fields: [gym_id], references: [id])
  comments   Comment[]
}

model Comment {
  id             String     @id @default(uuid())
  workout_log_id String
  workoutLog     WorkoutLog @relation(fields: [workout_log_id], references: [id])
  user_id        String
  user           User       @relation(fields: [user_id], references: [id])
  message        String
  createdAt      DateTime   @default(now())
  gym_id         String?
  gym            Gym?       @relation(fields: [gym_id], references: [id])
  responses      Response[]
}

model Response {
  id         String   @id @default(uuid())
  comment_id String
  comment    Comment  @relation(fields: [comment_id], references: [id])
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  message    String
  created_at DateTime @default(now())
  gym_id     String?
  gym        Gym?     @relation(fields: [gym_id], references: [id])
}

model Gym {
  id              String           @id @default(uuid())
  name            String
  location        String?
  users           User[]
  workouts        Workout[]
  personalRecords PersonalRecord[]
  workoutLogs     WorkoutLog[]
  comments        Comment[]
  responses       Response[]
}

enum Role {
  COACH
  ATHLETE
}

enum Exercise {
  SQUAT
  FRONT_SQUAT
  DEADLIFT
  BENCH_PRESS
  SHOULDER_PRESS
  SNATCH
  OVERHEAD_SQUAT
  CLEAN_AND_JERK
  CLEAN
  JERK
}
